"""
Traditional Chinese prompt templates for Java Peer Review Training System.

This module contains all the Traditional Chinese language prompt templates used for LLM interactions.
"""

# Code Generation Prompt Template
code_generation_template = """您是一位專家級的 Java 程式設計教師，正在創建包含特定故意錯誤的教育代碼，供學生練習代碼審查技能。

主要任務：
生成一個{code_length}的 Java 程式，適用於{domain_str}系統，其中包含恰好{error_count}個故意的錯誤，用於代碼審查練習。

代碼結構要求：
- 創建{complexity}
- 使代碼真實、結構良好，並適合{domain_str}應用
- 遵循標準的 Java 規範（除了故意的錯誤部分）
- 代碼應該看起來專業，除了故意引入的錯誤外

{difficulty_instructions}

錯誤實現要求：
- 實現恰好{error_count}個錯誤 - 這一點至關重要（不多也不少）
- 僅實現下方列出的特定錯誤
- 每個錯誤必須是實際的 Java 錯誤，而不僅僅是註解
- 在帶註解的版本中，使用註解標記每個錯誤：// ERROR: [類型] - [名稱] - [簡要說明]
- 絕不添加類似「// added to fix」或「// this is incorrect」的註解 - 這些錯誤就是要保持為錯誤！
- 確保錯誤可以通過代碼審查找到（不僅僅是運行時錯誤）

需要實現的恰好{error_count}個錯誤：

{error_instructions}

提交前的驗證清單：
- [ ] 代碼符合{code_length}/{difficulty_level}的複雜度要求
- [ ] 代碼真實且適合{domain_str}應用
- [ ] 恰好實現了{error_count}個錯誤（不多也不少）
- [ ] 每個實現的錯誤都與請求列表中的一個匹配
- [ ] 所有錯誤在帶註解的版本中都有適當的註解
- [ ] 乾淨版本有相同的錯誤但沒有註解
- [ ] 兩個版本都能編譯（除了故意的編譯錯誤）

輸出格式：
1. 首先，提供帶錯誤註解的版本：
```java-annotated
// 帶錯誤註解的代碼
```

2. 然後，提供不帶錯誤註解的乾淨版本：
```java-clean
// 相同的代碼，帶有相同的錯誤但沒有錯誤註解
```

重要提醒：完成前請確認您已實現恰好{error_count}個錯誤。
"""

# Difficulty level templates
beginner_instructions = """
初學者友好的代碼要求：
- 使用非常具有描述性的變數/方法名稱（如studentName、calculateTotal）
- 保持方法簡短（每個3-10行）並專注於單一任務
- 使用基本的控制結構（if/else、簡單循環）並具有明確的條件
- 包含有用的註解解釋代碼的目的
- 避免複雜的嵌套結構或高級Java特性
- 錯誤應相對明顯，以達到教育目的
- 以初學者能夠合理識別的方式實現錯誤
"""

intermediate_instructions = """
中級水平代碼要求：
- 使用簡單和中等複雜度結構的混合
- 包含各種控制結構和數據類型
- 保持方法大小適中（5-15行）
- 實現一些需要仔細閱讀才能識別的錯誤
- 在需要的地方添加適當的文檔
- 創建可能出現在小型應用程序中的真實代碼
- 平衡明顯錯誤和一些更微妙的錯誤
"""

advanced_instructions = """
高級水平代碼要求：
- 創建更複雜且合適的代碼結構
- 實現可能隱藏在邏輯流程或邊緣情況中的錯誤
- 適當使用各種Java特性和設計模式
- 鼓勵學生深入思考代碼
- 包含需要仔細分析才能識別的微妙錯誤
- 創建遵循良好結構的真實代碼（儘管有錯誤）
- 實現以非明顯方式相互作用的錯誤
"""

# Evaluation Prompt Template
evaluation_template = """作為Java代碼質量專家，您的任務是分析Java代碼，確定它是否正確實現了特定的請求錯誤。

主要任務：
評估提供的Java代碼是否正確實現了恰好{error_count}個特定的請求錯誤。

要評估的代碼：
```java
{code}
```

應該存在的{error_count}個特定錯誤：
{error_instructions}

評估指示：
1. 逐行檢查代碼，識別與請求列表匹配的每個錯誤
2. 對於您找到的每個錯誤，請註明：
- 具體的錯誤類型和名稱
- 錯誤出現的確切行號
- 顯示錯誤的簡短代碼段
- 為什麼它與請求的錯誤匹配的簡明解釋
3. 檢查代碼中是否缺少任何請求的錯誤
4. 對於有效的實現，代碼必須恰好包含{error_count}個錯誤 - 不多也不少

回應格式：
您的評估必須以以下JSON格式返回：

```json
{
"已識別的問題": [
    {
    "錯誤類型": "邏輯錯誤",    
    "錯誤名稱": "對短路運算的誤解",
    "行號": 42,
    "程式碼片段": "if (obj != null & obj.getValue() > 0) { ... }",
    "說明": "此代碼使用非短路運算符 '&' 而不是 '&&'，這意味著即使 obj 為 null，obj.getValue() 也會被執行，可能導致 NullPointerException"
    }
    // 列出所有與請求列表匹配的已實現錯誤
],
"遺漏的問題": [
    {
    "錯誤類型": "程式碼品質", 
    "錯誤名稱": "程式碼重複",
    "解釋": "此代碼中沒有可重構為共享方法的重複邏輯或重複代碼塊。程式碼重複是指相似功能被多次實現而非提取為可重用方法，這會降低可維護性並增加不一致修復錯誤的風險。"
    }
    // 列出所有未實現的請求錯誤
],
"有效": true,  // 只有當所有請求的錯誤都已實現，不多也不少時才設為true
"反饋": "代碼成功實現了所有{error_count}個請求的錯誤。"  // 提供簡要的總體評估
}
```

驗證清單：
- 確認每個找到的錯誤確實與相應的請求錯誤匹配
- 驗證找到的錯誤總數恰好為{error_count}，以確認有效性
- 仔細檢查您認為缺失的任何錯誤，確保它們確實不存在
- 確保您的JSON回應格式正確，便於處理

重要提示：僅關注指定的錯誤類型和名稱，而非一般的代碼質量問題。
"""

# Regeneration Prompt Template
regeneration_template = """您是一位教育性的Java錯誤創建者，故意在代碼中引入特定錯誤用於教學目的。

任務：
修改這段Java代碼，使其恰好包含{total_requested}個錯誤 - 不多也不少。
代碼必須僅包含下方請求的特定錯誤。

原始代碼領域：{domain}

缺失錯誤 - 故意添加這些錯誤（不要修復或解決它們）：
{missing_text}

現有錯誤要保留 - 不要修改這些錯誤：
{found_text}

非常重要的指示：
1. 專注於實現恰好請求的錯誤
2. 絕不添加類似「// added to fix」、「// fixed」或「// corrected」的註解 - 這些錯誤就是要保持為錯誤！
3. 不要改變代碼的領域或結構
4. 錯誤必須是實際的Java錯誤，而不僅僅是關於錯誤的註解
5. 使用完全相同的{domain}領域並維持原始代碼結構
6. 對於您添加的每個錯誤，包含以下格式的註解：// ERROR: [類型] - [名稱] - [簡要說明]
7. 不要嘗試改進或修復代碼 - 它應該包含故意的錯誤，用於教育目的
8. 整個目的是創建有缺陷的代碼，讓學生學習識別問題

提交前的驗證步驟：
1. 計算代碼中的錯誤總數，確認恰好為{total_requested}
2. 驗證列表中的每個缺失錯誤現在都已實現
3. 確認所有應保留的現有錯誤仍然存在且未更改
4. 確保已移除任何額外的錯誤

提供兩個版本的代碼：
1. 首先，提供帶錯誤註解的版本，標記為：
```java-annotated
// 您的代碼，帶有故意的錯誤和錯誤註解
```

2. 然後，提供不帶任何錯誤註解的乾淨版本，標記為：
```java-clean
// 相同的代碼，帶有相同的故意錯誤但沒有錯誤註解
```

原始代碼：
```java
{code}
```
"""

# Review Analysis Prompt Template
review_analysis_template = """您是一位教育評估專家，正在分析學生的Java代碼審查技能。

主要任務：
分析學生的代碼審查結果，針對一組已知問題評估其代碼審查有效性。

被審查的代碼：
```java
{code}
```

代碼中的{problem_count}個已知問題：
{problems_text}

學生的審查提交：
```
{student_review}
```
評估閾值：
1. 有意義性閾值：{meaningful_score_threshold}（解釋"為什麼"它是問題的程度）
2. 準確性閾值：{accuracy_score_threshold}（問題和位置識別的正確程度）

分析指示：
1. 仔細閱讀代碼和學生的審查
2. 對於每個已知問題，確定學生是否提出了解決方案
3. 對於每個針對已知問題的學生評論進行評分：
    + 準確性（0.0-1.0）：學生識別問題及其位置的正確程度
    + 有意義性（0.0-1.0）：學生解釋"為什麼"它是問題的程度
4. 關鍵分類規則：只有當兩個分數都達到或超過閾值時，問題才被視為"已識別"
    + 如果準確性 >= {accuracy_score_threshold} 且有意義性 >= {meaningful_score_threshold} → 添加到"已識別的問題"
    + 否則 → 添加到"遺漏的問題"（即使部分提及但分數不足）
5. 在"已識別數量"中只計算正確識別的問題（達到兩個閾值）

回應格式：

```json
{{
"已識別的問題": [
    {{
    "問題": "具體已知問題文本",
    "學生評論": "學生的相關評論",
    "準確率": 0.9,
    "有意義性": 0.8,
    "反饋": "關於此識別的簡短反饋"
    }}
],
"遺漏的問題": [
    {{
    "問題": "具體已知問題文本 - 完全未提及",
    "提示": "幫助找到此問題的有用教育提示"
    }},
    {{
    "問題": "具體已知問題文本 - 已提及但分數過低",
    "學生評論": "學生的相關評論",
    "準確率": 0.5,
    "有意義性": 0.3,
    "提示": "評論缺乏關於為什麼這是問題的足夠細節"
    }}
],
"已識別數量": 1,
"總問題數": {problem_count},
"識別百分比": 25.0,
"審查足夠": false,
"反饋": "總體評估，提供具體改進建議"
}}
```

關鍵要求：
1. 每個問題在"已識別的問題"或"遺漏的問題"中僅出現一次
2. 不要創建除上述所示以外的任何額外字段
3. 只有當兩個分數都達到閾值時，才將問題包含在"已識別的問題"中
4. 包含原始學生評論（若有），即使是遺漏的問題
5. "已識別數量"為"已識別的問題"中的項目數量
6. 對於學生已提及但分數不足的"遺漏的問題"中的項目，包含實際分數
"""

# Feedback Prompt Template
feedback_template = """作為Java導師提供針對性的代碼審查指導，為學生創建簡潔的反饋。

背景：
- 學生完成了第{iteration}次審查嘗試，共{max_iterations}次
- 找到了{identified}/{total}個問題（準確率{accuracy:.1f}%）
- 剩餘{remaining}次審查嘗試

審查質量問題：
- 一些識別的問題缺乏有意義的評論
- 有意義的評論必須解釋問題是什麼以及為什麼它是有問題的

正確識別的問題：
{identified_text}

遺漏的問題：
{missed_text}

任務：
創建簡潔、具體的指導（最多3-4個短句子），幫助學生在下一次審查嘗試中找到更多問題並撰寫更有意義的評論。

指導要求：
1. 極其簡潔明確（最多3-4個短句子）
2. 針對最重要的1-2個需改進的領域
3. 提供具體、可行的策略（尋找什麼）
4. 鼓勵但直接
5. 包含如何將模糊評論轉變為有意義評論的例子

良好指導示例：
"仔細查看方法參數和返回類型。幾個問題涉及類型不匹配和空值處理。評論時，解釋每個問題為什麼有問題，而不僅僅是它在哪裡。例如，不要只寫「第11行：空值檢查問題」，而應寫「第11行：在空值檢查前訪問對象，這樣可能導致空指針異常」。"

不良指導示例（過於一般性）：
"繼續嘗試找到更多問題。代碼中還有幾個你遺漏的問題。在下一次審查嘗試中更加徹底。"

回應格式：
只提供指導文本，不需要介紹或解釋。
"""

# Comparison Report Prompt Template
comparison_report_template = """您是一位教育評估專家，正在為Java程式設計學生創建詳細、有信息量的代碼審查反饋報告。

背景：
學生已完成一次代碼審查練習，識別Java代碼片段中的錯誤。您的任務是創建一份全面的教育報告，評估他們的表現。

績效指標：
- 代碼中的總問題數：{total_problems}
- 正確識別的問題：{identified_count}（{accuracy:.1f}%）
- 遺漏的問題：{len_missed_str}

正確識別的問題：
{identified_text}

遺漏的問題：
{missed_text}


{progress_info}

報告要求：
1. 創建一份全面的教育報告，使用markdown格式
2. 包含以下部分：
- 績效摘要（包含指標和整體評估）
- 正確識別的問題（讚揚他們正確找到的內容）
- 遺漏的問題（解釋為什麼這些問題很重要）
- 改進提示（基於他們的表現提供具體、可行的建議）

3. 具有教育性和建設性，而不僅僅是評估性
4. 使用溫暖、鼓勵的語調，同時誠實面對需要改進的地方
5. 專注於幫助他們成為更好的代碼審查者，而不僅僅是評分這次嘗試
6. 突出他們遺漏或發現的模式，以幫助他們系統性地改進
7. 包含與他們表現相關的具體Java代碼審查提示
8. 使報告在視覺上易於閱讀，使用適當的markdown格式

重要格式說明：
- 使用markdown進行清晰的組織（標題、項目符號等）
- 如果引用特定代碼，使用markdown代碼塊格式化代碼片段
- 使用粗體或斜體文本進行強調
- 保持段落合理簡短，便於閱讀
"""