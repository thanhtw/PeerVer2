{
    "邏輯錯誤": [
      {
        "錯誤名稱": "離一錯誤",
        "描述": "迴圈多或少執行一次的錯誤，常見於陣列索引或邊界條件。",
        "實作範例": "使用錯誤邊界的迴圈，例如 `for(int i=0; i<=array.length; i++)` 而非 `for(int i=0; i<array.length; i++)`，或在需要 `<=` 時誤用 `<`。"
      },
      {
        "錯誤名稱": "先使用後檢查 null",
        "描述": "在檢查物件是否為 null 之前就存取其方法或欄位，可能拋出 NullPointerException。",
        "實作範例": "先使用物件再檢查是否為 null，例如 `if(object.getValue() > 0 && object != null)`。"
      },
      {
        "錯誤名稱": "意外的整數除法",
        "描述": "在需要浮點數運算時，整數相除導致小數部分被截斷。",
        "實作範例": "`double result = 5 / 2;` 會得到 2.0 而非 2.5。"
      },
      {
        "錯誤名稱": "忽略方法回傳值",
        "描述": "未檢查或使用方法的回傳值，尤其是回傳狀態或修改後值的方法。",
        "實作範例": "呼叫 `myString.replace(\"old\", \"new\");` 而未將結果指派回變數。"
      },
      {
        "錯誤名稱": "equals 和 hashCode 實作不一致",
        "描述": "覆寫 equals() 卻未覆寫 hashCode()，或兩者實作不一致。",
        "實作範例": "只覆寫 equals() 而未覆寫 hashCode()。"
      },
      {
        "錯誤名稱": "對短路運算的誤解",
        "描述": "未正確利用 && 和 || 的短路機制，導致潛在錯誤或效率低下。",
        "實作範例": "`if(obj != null & obj.getValue() > 0)` 應使用 `&&`。"
      },
      {
        "錯誤名稱": "多執行緒中的競態條件",
        "描述": "在多執行緒存取共用資源時，同步不足導致不可預期行為。",
        "實作範例": "未對共用變數進行適當同步或鎖定。"
      },
      {
        "錯誤名稱": "使用 == 比較字串",
        "描述": "使用 == 而非 equals() 比較 String 物件。",
        "實作範例": "`if(str1 == str2)` 而非 `if(str1.equals(str2))`。"
      },
      {
        "錯誤名稱": "在斷言中產生副作用",
        "描述": "在斷言裡包含會修改狀態的操作，當斷言被禁用時不會執行。",
        "實作範例": "`assert (x = calculateValue()) > 0;`。"
      },
      {
        "錯誤名稱": "switch 語句缺少 break",
        "描述": "在 switch case 中遺漏 break，導致執行落空。",
        "實作範例": "各 case 後未加上 break。"
      },
      {
        "錯誤名稱": "在比較時使用賦值",
        "描述": "在條件判斷中使用 = 而非 ==，導致不預期行為。",
        "實作範例": "`if(x = 5)` 而非 `if(x == 5)`。"
      },
      {
        "錯誤名稱": "運算子優先順序誤解",
        "描述": "對運算子優先順序的假設錯誤，導致意外結果。",
        "實作範例": "`a + b * c` 實際為 `a + (b * c)`，需要加括號。"
      }
    ],
    "語法錯誤": [
      {
        "錯誤名稱": "缺少分號",
        "描述": "未在敘述句末加分號，導致編譯錯誤。",
        "實作範例": "`int x = 5` 而非 `int x = 5;`。"
      },
      {
        "錯誤名稱": "括號不平衡",
        "描述": "開／關括號、花括號或圓括號不匹配。",
        "實作範例": "`if (condition) { doSomething();` 缺少閉括號。"
      },
      {
        "錯誤名稱": "方法宣告錯誤",
        "描述": "方法宣告語法錯誤，例如缺少回傳型別或錯誤修飾子。",
        "實作範例": "`public calculateTotal(int x, int y) {}` 應為 `public int calculateTotal(int x, int y) {}`。"
      },
      {
        "錯誤名稱": "無效的變數宣告",
        "描述": "變數宣告語法錯誤，例如缺少型別或使用無效識別字。",
        "實作範例": "`int 2count = 10;` 或 `count = 5;`（未指定型別）。"
      },
      {
        "錯誤名稱": "賦值型別不匹配",
        "描述": "將不相容型別的值指派，未進行適當轉型。",
        "實作範例": "`int x = \"Hello\";` 或 `String s = 42;`。"
      },
      {
        "錯誤名稱": "將關鍵字當識別字",
        "描述": "使用 Java 保留字作為變數、方法或類名。",
        "實作範例": "`int class = 10;` 或 `void public() { }`。"
      },
      {
        "錯誤名稱": "缺少 return 敘述",
        "描述": "在有回傳型別的方法中未提供 return。",
        "實作範例": "`public int getValue() { int x = 10; }` 未回傳 x。"
      },
      {
        "錯誤名稱": "非法的修飾子",
        "描述": "為類別、方法或變數使用不相容或多餘的修飾子。",
        "實作範例": "`private public void method()`, `final abstract class MyClass`。"
      }
    ],
    "程式碼品質": [
      {
        "錯誤名稱": "魔術數字",
        "描述": "在程式中直接使用數字，降低可讀性與維護性。",
        "實作範例": "`if(count > 1000)` 或 `for(int i=0; i<365; i++)`，應使用具名常數。"
      },
      {
        "錯誤名稱": "過長的方法",
        "描述": "方法過長且承擔過多責任，違反單一職責原則。",
        "實作範例": "超過 50 行的複雜方法，應拆成較小且專注的方法。"
      },
      {
        "錯誤名稱": "程式碼重複",
        "描述": "重複的程式區塊，應重構成共用方法或工具。",
        "實作範例": "多處複製貼上相同邏輯，應抽取共通邏輯。"
      },
      {
        "錯誤名稱": "過度巢狀",
        "描述": "過多層級的條件或迴圈巢狀，降低可讀性。",
        "實作範例": "超過 4 層巢狀，應使用早期返回或抽取方法。"
      },
      {
        "錯誤名稱": "例外處理不當",
        "描述": "捕捉過於廣泛或空的 catch，吞噬例外，缺乏適當處理。",
        "實作範例": "`catch(Exception e) {}` 或不具體處理例外。"
      },
      {
        "錯誤名稱": "缺少日誌紀錄",
        "描述": "缺乏或不足的日誌紀錄，難以除錯。",
        "實作範例": "catch 區塊內未記錄異常，或未記錄重要事件。"
      },
      {
        "錯誤名稱": "不適當的註解",
        "描述": "註解誤導、過時或僅重複程式碼而無實質價值。",
        "實作範例": "`// increment counter` for `counter++`。"
      },
      {
        "錯誤名稱": "變數命名不佳",
        "描述": "使用模糊、不明或過度縮寫的變數名稱，無法表達用途。",
        "實作範例": "使用 `x`、`temp`、`data` 作為變數名。"
      },
      {
        "錯誤名稱": "違反 Demeter 法則",
        "描述": "物件應僅與直接鄰居互動，避免過度耦合。",
        "實作範例": "`object.getX().getY().doZ()`。"
      },
      {
        "錯誤名稱": "未使用合適的集合",
        "描述": "對操作使用了不合適的集合型別，導致效能低下。",
        "實作範例": "需要頻繁插入刪除時用 ArrayList 而非 LinkedList。"
      },
      {
        "錯誤名稱": "過度類別耦合",
        "描述": "類別間高度相依，系統脆弱且難以修改。",
        "實作範例": "類別直接引用多個具體類別，應使用介面或依賴注入。"
      },
      {
        "錯誤名稱": "未使用 try-with-resources",
        "描述": "未對 AutoCloseable 資源使用 try-with-resources，易造成資源洩漏。",
        "實作範例": "手動在 finally 塊關閉資源。"
      }
    ],
    "標準違規": [
      {
        "錯誤名稱": "命名慣例不一致",
        "描述": "未遵循 Java 類、方法、變數和常量的標準命名慣例。",
        "實作範例": "`class myClass`（小寫）、`public void GetValue()`（方法大寫）。"
      },
      {
        "錯誤名稱": "縮排不當",
        "描述": "縮排不一致或錯誤，降低可讀性。",
        "實作範例": "巢狀區塊縮排不一致或缺失。"
      },
      {
        "錯誤名稱": "匯入語句未整理",
        "描述": "匯入未使用或未分組。",
        "實作範例": "匯入未使用的類別、濫用萬用字元匯入。"
      },
      {
        "錯誤名稱": "缺少檔案標頭",
        "描述": "程式檔案缺少標準標頭註解，說明目的、作者及授權資訊。",
        "實作範例": "省略檔案標頭註解。"
      },
      {
        "錯誤名稱": "行長違規",
        "描述": "程式行超過建議長度（通常 80-120 字元）。",
        "實作範例": "書寫過長的程式行。"
      },
      {
        "錯誤名稱": "大括號位置不一致",
        "描述": "大括號樣式混用，整體不一致。",
        "實作範例": "`if (condition) {` 與 `if (condition)\n{` 混用。"
      },
      {
        "錯誤名稱": "不常見的套件結構",
        "描述": "未遵循套件命名和組織慣例。",
        "實作範例": "使用大寫套件名。"
      },
      {
        "錯誤名稱": "忽略程式碼分析警告",
        "描述": "未經適當說明而壓制或忽略靜態分析工具的警告。",
        "實作範例": "加入 `@SuppressWarnings` 而無解釋理由。"
      }
    ],
    "Java 特定錯誤": [
      {
        "錯誤名稱": "使用原始類型",
        "描述": "使用未參數化的原始型別，繞過泛型型別安全。",
        "實作範例": "`List list = new ArrayList();` 而非 `List<String> list = new ArrayList<>();`。"
      },
      {
        "錯誤名稱": "迭代時修改集合",
        "描述": "在 for-each 迴圈中修改集合，導致 ConcurrentModificationException。",
        "實作範例": "`for(String item : items) { if(condition) items.remove(item); }`。"
      },
      {
        "錯誤名稱": "忽略 InterruptedException",
        "描述": "捕捉 InterruptedException 卻未適當處理，破壞執行緒中斷機制。",
        "實作範例": "`try { Thread.sleep(1000); } catch (InterruptedException e) { }`。"
      },
      {
        "錯誤名稱": "裝箱／拆箱開銷",
        "描述": "在緊密迴圈中不必要地在原始型別與包裝類別間轉換，影響效能。",
        "實作範例": "`Integer sum = 0; for(int i=0; i<1000000; i++) { sum += i; }`。"
      },
      {
        "錯誤名稱": "誤用 finalize()",
        "描述": "為資源管理覆寫 finalize()，由於垃圾回收不可靠而不建議。",
        "實作範例": "覆寫 finalize() 來關閉資源。"
      },
      {
        "錯誤名稱": "過度使用檢查型例外",
        "描述": "宣告方法拋出可本地處理或可轉換為未檢查型例外的例外。",
        "實作範例": "將檢查型例外向上傳遞，忽略可本地處理。"
      },
      {
        "錯誤名稱": "未使用菱形語法",
        "描述": "在泛型實例化時未使用菱形（<>）。",
        "實作範例": "`new HashMap<String, List<Integer>>();` 而非 `new HashMap<>();`。"
      },
      {
        "錯誤名稱": "未使用 @Override 註解",
        "描述": "覆寫方法時未添加 @Override 註解，失去編譯檢驗。",
        "實作範例": "覆寫方法時未加 @Override。"
      }
    ]
}